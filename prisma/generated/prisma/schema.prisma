generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  customer
  organizer
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  role         Role     @default(customer)
  avatar       String?
  referralCode String   @unique
  referredBy   String? // Holds the referralCode of the referring user (if any)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Self-relation for referrals:
  referredByUser User?  @relation("ReferralRelation", fields: [referredBy], references: [referralCode])
  referredUsers  User[] @relation("ReferralRelation")

  referralPoints ReferralPoint[]  @relation("ReferralReceiver")
  givenReferrals ReferralPoint[]  @relation("ReferralSource")
  userDiscounts  UserDiscount[]
  events         Event[]          @relation("Organizer")
  purchases      TicketPurchase[]
}

model ReferralPoint {
  id           Int      @id @default(autoincrement())
  user         User     @relation("ReferralReceiver", fields: [userId], references: [id])
  userId       Int
  sourceUser   User     @relation("ReferralSource", fields: [sourceUserId], references: [id])
  sourceUserId Int
  points       Int
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model UserDiscount {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  referralCode String
  discount     Float
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  organizer   User     @relation("Organizer", fields: [organizerId], references: [id])
  organizerId Int
  title       String
  description String
  location    String
  eventDate   DateTime
  ticketPrice Float
  createdAt   DateTime @default(now())

  purchases  TicketPurchase[]
  statistics EventStatistic[]
}

model TicketPurchase {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  event           Event    @relation(fields: [eventId], references: [id])
  eventId         Int
  quantity        Int
  totalPrice      Float
  pointsRedeemed  Int?
  discountApplied Float?
  purchaseDate    DateTime @default(now())
}

model EventStatistic {
  id           Int      @id @default(autoincrement())
  event        Event    @relation(fields: [eventId], references: [id])
  eventId      Int
  statDate     DateTime
  totalSales   Float
  totalTickets Int
  createdAt    DateTime @default(now())
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
